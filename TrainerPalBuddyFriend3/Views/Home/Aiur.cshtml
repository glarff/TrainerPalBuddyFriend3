@model Danimoth

    <div class="wrapper">

        <!---------------------- Title and Start Button ------------------------>

        <div class="box a">
            <span id="workoutTitle" class="wkTitle"></span>
        </div>

        <div class="box b">
            <span class="buttonContainer">
                <button class ="btnStartTimer" type="button">Start</button>
            </span>
        </div>
        <!---------------------------------------------------------------------->
        <!------------------------ Main Timer Section -------------------------->

        <div class="box c">
            <div class="mainComponentContainer">
                <div id="mainTimer" class="bigTimer"></div>
            </div>
            <span class="mainTimerFooter">Time Remaining in Workout</span>
        </div>
        <!---------------------------------------------------------------------->
        <!---------------------- Current Segment Section ----------------------->

        <div class="box d">
            <span class="segmentTitleLabel">Current Segment: </span>

            <div class="segmentTitleContainer">
                <div id="segmentTitle"></div>
            </div>

            <div class="mainComponentContainer">
                <div id="segmentTimer" class="bigTimer"></div>
            </div>

            <span class="segmentTimerFooter">Time Remaining in Segment</span>
        </div>
        <!---------------------------------------------------------------------->
        <!------------------------ Segment Tips Section ------------------------>

        <div class="box e">
            <div class="mainComponentContainer">
                <div id="segmentTips" class="segmentTips"></div>
            </div>
            <span class="segmentTipsFooter">Segment Tips</span>
        </div>
        <!---------------------------------------------------------------------->
        <!--------------------- Upcoming Segments Section ---------------------->

        <div class="box f">
            <span class="upcomingSegmentsTitle">Upcoming Segments</span>
        </div>

        <div class="box g">
            <div class="upcomingSegmentsIntensityContainer">
                <div id="upcomingSegment1intensity" class="intensityText">*</div>
                <div id="upcomingSegment2intensity" class="intensityText">*</div>
                <div id="upcomingSegment3intensity" class="intensityText">*</div>
                <div id="upcomingSegment4intensity" class="intensityText">*</div>
                <div id="upcomingSegment5intensity" class="intensityText">*</div>
            </div>
        </div>

        <div class="box h">
            <div class="upcomingSegmentsTitleContainer">
                <div id="upcomingSegment1title" class="segmentsText"></div>
                <div id="upcomingSegment2title" class="segmentsText"></div>
                <div id="upcomingSegment3title" class="segmentsText"></div>
                <div id="upcomingSegment4title" class="segmentsText"></div>
                <div id="upcomingSegment5title" class="segmentsText"></div>
            </div>
        </div>

        <div class="box i">
            <div class="upcomingSegmentsWindowContainer">
                <div id="upcomingSegment1window" class="segmentsText"></div>
                <div id="upcomingSegment2window" class="segmentsText"></div>
                <div id="upcomingSegment3window" class="segmentsText"></div>
                <div id="upcomingSegment4window" class="segmentsText"></div>
                <div id="upcomingSegment5window" class="segmentsText"></div>
            </div>
        </div>
        <!---------------------------------------------------------------------->

    </div>

    <script>

    var w1 = null;

    var segAry = [];

// Convery model to js object
var model = @Html.Raw(Json.Encode(Model));

    for (var seg of model.Dts) {
        segAry.push(newSegment(seg.RSegmentName, seg.RWkseg.Duration, seg.RSegmentIntensity, seg.RTip.Text));
    }

    w1 = newWorkout(model.DWorkoutName, "", "", segAry);

// Calculate total duration of all segments
totalTime = calculateTotalTime(w1);

// Initial population of next segments list
elapsedDuration = 0;

for (i = 0; i < 5; i++) {
      
nextSegmentWindow = calculateSegmentWindow(totalTime, elapsedDuration, w1.segments[i].duration);

changeText("upcomingSegment" + (i+1) + "intensity", w1.segments[i].intensity);
changeColor("upcomingSegment" + (i+1) + "intensity", getColorByIntensity(w1.segments[i].intensity));
changeText("upcomingSegment" + (i+1) + "window", nextSegmentWindow);
changeText("upcomingSegment" + (i+1) + "title", w1.segments[i].title);

elapsedDuration += w1.segments[i].duration;

}

// Set the Workout Title
changeText("workoutTitle", w1.title);

// Display the first segment
changeText("segmentTitle", w1.segments[0].title);
changeText("segmentTips", w1.segments[0].tips);

// Initial population of timers
changeText("mainTimer", formatForTimer2(totalTime));

changeText("segmentTimer", formatForTimer2(w1.segments[0].duration));
changeBorder(w1.segments[0].intensity);


        function execute() {
            // Calculate total time and time left after semgment 1
            totalTime = calculateTotalTime(w1);
            timeRemainingAfterCurrentSegment = totalTime - w1.segments[0].duration;

            // Set the date/time we're counting down to
            finishTime = new Date().addMilliseconds(totalTime);
            currentSegment = 0;
            elapsedDuration = 0;

            // Shift down in upcoming segments
            updateUpcomingSegments(w1, totalTime, 0);

            // Start loop - iterate every .1 seconds
            x = setInterval(function () {

                // Get todays date and time
                now = new Date().getTime();

                // Find the distance between now and the count down date
                distance = finishTime - now;
                distance2 = distance - timeRemainingAfterCurrentSegment;

                mainTimerDivs = getTimeDivisions(distance);
                segTimerDivs = getTimeDivisions2(distance2);

                mainTimerHours = mainTimerDivs.hrs;
                mainTimerMinutes = mainTimerDivs.mins;
                mainTimerSeconds = mainTimerDivs.secs;

                segTimerMinutes = segTimerDivs.mins;
                segTimerSeconds = segTimerDivs.secs;

                // Display the main timer
                changeText("mainTimer", formatForTimer(mainTimerHours, mainTimerMinutes,
                    mainTimerSeconds));

                // Display segment timer - use00 if negative
                if (segTimerSeconds < 0) {
                    changeText("segmentTimer", formatForTimer(0, 0, 0));
                }

                else {
                    changeText("segmentTimer", formatForTimer(0, segTimerMinutes,
                        segTimerSeconds));
                }

                // Set component backgrounds based on intensity
                if (currentSegment < w1.segments.length) {
                    changeBorder(w1.segments[currentSegment].intensity);
                }

                // When reaching end of the timer
                if (distance < 0) {
                    clearInterval(x);
                    changeText("mainTimer", "Done!");
                    changeText("segmentTimer", "Done!");
                }

                // When rearching the end of a segment
                else if (distance2 < 0) {

                    currentSegment++;

                    // Recalculate time remaining after this segment
                    timeRemainingAfterCurrentSegment = totalTime;

                    for (i = 0; i < currentSegment + 1; i++) {
                        timeRemainingAfterCurrentSegment -= w1.segments[i].duration;
                    }

                    // Update the labels on the screen
                    changeText("segmentTitle", w1.segments[currentSegment].title);
                    changeText("segmentTips", w1.segments[currentSegment].tips);

                    // Update the next segments list
                    updateUpcomingSegments(w1, totalTime, currentSegment);
                }

            }, 100);

        }

/* ============================= FIN ============================= */

    </script>
